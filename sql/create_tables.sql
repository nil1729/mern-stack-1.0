DROP TABLE IF EXISTS USERS, USER_PROFILES, USER_EXPERIENCES, USER_EDUCATIONS;

show warnings;


CREATE TABLE IF NOT EXISTS USERS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(100) NOT NULL,
    EMAIL_ADDRESS VARCHAR(100) NOT NULL UNIQUE,
    USERNAME VARCHAR(100) UNIQUE,
    EMAIL_VERIFIED BOOL DEFAULT FALSE,
    PASSWORD VARCHAR(255) NOT NULL,
    VERIFICATION_EMAIL_SENT BOOL DEFAULT FALSE,
    NEW_ACCOUNT BOOL DEFAULT TRUE,
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

show warnings;

CREATE TABLE IF NOT EXISTS USER_PROFILES (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CURRENT_POSITION VARCHAR(100) NOT NULL,
    CURRENT_WORKING_PLACE_NAME VARCHAR(100) NOT NULL,
    WEBSITE_URL VARCHAR(100),
    LOCATION VARCHAR(150),
    SKILLS TEXT  NOT NULL,
    GITHUB_USERNAME VARCHAR(100),
    BIO TEXT,
    TWITTER_URL VARCHAR(150),
    LINKEDIN_URL VARCHAR(150),
    FACEBOOK_URL VARCHAR(150),
    YOUTUBE_CHANNEL_URL VARCHAR(150),
    INSTAGRAM_URL VARCHAR(150),
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    USER_ID INT UNIQUE NOT NULL,
    FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
);

show warnings;

CREATE TABLE IF NOT EXISTS USER_EXPERIENCES (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    JOB_TITLE VARCHAR(150) NOT NULL,
    COMPANY_NAME VARCHAR(150) NOT NULL,
    LOCATION VARCHAR(255),
    STARTING_DATE DATE NOT NULL DEFAULT (CURRENT_DATE),
    ENDING_DATE DATE,
    JOB_DESCRIPTION TEXT,
    USER_ID INT NOT NULL,
    FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
);

show warnings;

CREATE TABLE IF NOT EXISTS USER_EDUCATIONS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    SCHOOL_NAME VARCHAR(150) NOT NULL,
    DEGREE VARCHAR(150) NOT NULL,
    FIELD_OF_STUDY VARCHAR(150),
    STARTING_DATE DATE NOT NULL DEFAULT (CURRENT_DATE),
    ENDING_DATE DATE,
    PROGRAM_DESCRIPTION TEXT,
    USER_ID INT NOT NULL,
    FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
);